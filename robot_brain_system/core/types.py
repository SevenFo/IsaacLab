"""
Core types and enums for the robot brain system.
"""

from enum import Enum
from typing import Any, Dict, Optional, List, Union, Generator, Callable
from dataclasses import dataclass, field
import numpy as np


class SystemStatus(Enum):
    """System status enumeration."""

    IDLE = "idle"
    THINKING = "thinking"
    EXECUTING = "executing"
    MONITORING = "monitoring"
    ERROR = "error"
    SHUTDOWN = "shutdown"


class SkillStatus(Enum):
    """Skill execution status."""

    NOT_STARTED = "not_started"
    RUNNING = "running"
    PAUSED = "paused"
    COMPLETED = "completed"
    FAILED = "failed"
    INTERRUPTED = "interrupted"
    IDLE = "idle"  # Skill is not currently executing
    TIMEOUT = "timeout"


@dataclass
class Action:
    """Action representation for the environment."""

    data: Union[np.ndarray, Dict[str, Any]]
    metadata: Optional[Dict[str, Any]] = None

    def to_numpy(self) -> np.ndarray:
        """Convert action to numpy array format."""
        if isinstance(self.data, np.ndarray):
            return self.data
        elif isinstance(self.data, dict):
            # Flatten dict to array based on some convention
            return np.concatenate(
                [np.array(v).flatten() for v in self.data.values()]
            )
        else:
            return np.array(self.data)


@dataclass
class Observation:
    """Observation representation from the environment."""

    data: Union[np.ndarray, Dict[str, Any]]
    metadata: Optional[Dict[str, Any]] = None
    timestamp: Optional[float] = None

    def get(self, key: str, default: Any = None) -> Any:
        """Get observation data by key."""
        if isinstance(self.data, dict):
            return self.data.get(key, default)
        return default


@dataclass
class Task:
    """Task representation for the brain to process."""

    id: str
    description: str
    image: Optional[str] = None  # base64 encoded image
    priority: int = 1
    timeout: Optional[float] = None
    metadata: Optional[Dict[str, Any]] = None


@dataclass
class SkillPlan:
    """Plan generated by the brain for task execution."""

    task_id: str
    skill_sequence: List[str]
    skill_params: List[Dict[str, Any]]
    monitoring_interval: float = 1.0  # seconds
    expected_duration: Optional[float] = None


class SkillType(Enum):
    """Types of skills."""

    FUNCTION = "function"  # Simple Python function (fixed logic)
    POLICY = "policy"  # Trained RL policy


class ExecutionMode(Enum):
    """Execution modes for skills."""

    DIRECT = "direct"  # Execute immediately without yielding
    GENERATOR = "generator"  # Execute with yield for env.step() calls


# Type aliases for better readability
SkillGenerator = Callable[
    [Dict[str, Any]], Generator[Action, Observation, Any]
]
PolicyFunction = Callable[[Observation], Action]
DirectFunction = Callable[[Dict[str, Any]], bool]


@dataclass
class SkillDefinition:
    """Definition of a skill."""

    name: str
    skill_type: SkillType
    execution_mode: ExecutionMode
    function: Union[SkillGenerator, PolicyFunction, DirectFunction]
    description: str = ""
    timeout: Optional[float] = None
    requires_env: bool = False
    criterion: Dict[str, str] | None = (
        None  # 新增字段，用于描述技能状态判定条件
    )

    def __post_init__(self):
        if self.criterion is None:
            self.criterion = {
                "successed": "Skill completed successfully",
                "failed": "Skill failed to complete",
            }


@dataclass
class SkillExecution:
    """Current execution state of a skill."""

    skill_name: str
    status: SkillStatus
    generator: Optional[Generator[Action, Observation, Any]] = None
    start_time: Optional[float] = None
    last_action: Optional[Action] = None
    last_observation: Optional[Observation] = None
    error_message: Optional[str] = None
